#!/usr/bin/ruby1.8
#
#--
# Portions Copyright (c) 2006 Mooter Media Ltd
# All rights reserved.
#
# Portions Copyright (c) 2006 Matthew Palmer <mpalmer@hezmatt.org>
# All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation (version 2 of the License)
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston MA  02110-1301 USA
#++
# Ruby snmpd is a complete, stand-alone SNMP agent program designed for
# flexibility and easy customisation of the contents of the MIB.
#
# If you're familiar with the net-snmp agent, you will be familiar with the
# intention of this program.  However, unlike the net-snmp agent, Ruby snmpd
# doesn't (at present) define a lot of pre-existing, standard MIB subtrees.
# Instead, it allows you to easily define your own plugins to report on
# site-specific data.
#
# The upside of this is huge -- all of those interesting factoids about your
# machines can now be easily exposed using SNMP.  The lack of in-built MIB
# data is annoying, but the agent has a proxying capability, so you can
# ask another agent, such as net-snmp, for any values that Ruby snmpd can't
# handle itself.
#
# = Invocation
#
# Full documentation on the command line options available for the Ruby
# snmpd agent is available by running <tt>snmpd --help</tt>.
#
# = Plugins
#
# A plugin for the Ruby snmpd agent is simply a chunk of code that is
# executed whenever a request for an OID in a specified subtree of the MIB
# is received.
#
# The easiest way to include a plugin in the agent is to place it in the
# plugins directory of the agent.  You can find out what the plugins
# directory is for your agent by running <tt>snmpd --help</tt> and examining
# the default for the <tt>--plugindir</tt> option.  You can also change
# the directory examined for plugins by using that option.
#
# Writing plugins is a slightly involved topic, so I will simply refer the
# interested reader to the 'Writing Plugins' section of the SNMP::Agent
# class documentation.
#
# = Proxying
#
# This is an important topic until there is broad coverage of the common MIB
# sub-trees through native Ruby snmpd plugins (or you only want to use Ruby
# snmpd to provide a few custom values through plugins you write yourself).
#
# To specify a proxy, you simply create a special plugin that contains a
# specification like the following:
#
#   self.add_proxy(base_oid, host, port)
#
# name it <tt>proxies.rb</tt> (or any other name ending in <tt>.rb</tt>,
# actually), and add that plugin to your standard plugins directory (see
# above for more information on plugins and directories).  If you need
# multiple proxies for different subtrees, just add multiple
# <tt>add_proxy</tt> calls to your <tt>proxies.rb</tt> file.
#
# This tells the agent that, for any requests for an OID below the
# <base_oid> given, it should make an SNMP request to the given <host> and
# <port> for that same OID, and return the results.
#
# For more information on Proxying, see the 'Proxying to other SNMP agents'
# section of the SNMP::Agent class documentation.
#

require 'optparse'
require 'fileutils'

require 'snmp/agent'

class RubySnmpd  # :nodoc:
	VERSION = "0.1"
	
	def main(*argv)
		@options = {
			:printhelp => false,
			:printversion => false,
			:logfile => '/var/log/ruby-snmpd.log',
			:pidfile => '/var/run/ruby-snmpd.pid',
			:background => true,
			:port => 161,
			:user => 'rubysnmpd',
			:plugindirs => ['/usr/lib/ruby/1.8/snmp/agent_plugins'],
			:background => true,
			:debug => false
		}

		cmdopts.parse(*argv)

		if @options[:printhelp] or @options[:printversion]
			puts "Ruby snmpd, version #{RubySnmpd::VERSION}\n\n"
		end
		
		if @options[:printhelp]
			puts cmdopts
		end
	
		if @options[:printhelp] or @options[:printversion]
			exit 0
		end

		@pidfile = Pidlock.new(@options[:pidfile])

		if @pidfile.locked?
			puts "Another ruby-snmpd process is running; exiting"
			exit 1
		end
	
		@log = Logger.new(@options[:logfile])
		@log.level = @options[:debug] ? Logger::DEBUG : Logger::INFO

		a = SNMP::Agent.new(:port => @options[:port],
		                    :logger => @log)

		begin
			boot(a)
		rescue SystemExit
			@log.info("Exiting")
		rescue Exception => e
			@log.error("Unhandled exception: #{e.class}: #{e.message}")
			@log.error("Backtrace follows:")
			e.backtrace.each { |l| @log.error l }
		ensure
			@pidfile.unlock
		end
	end

	def cmdopts
		opts = OptionParser.new
	
		opts.on('-h', '--help',
		        "Print usage information") { @options[:printhelp] = true }
		opts.on('-V', '--version',
		        "Print version information and exit") { @options[:printversion] = true }
		opts.on('-p', '--port PORT',
		        "Specify the port for the agent to listen on",
		        "(default: #{@options[:port]})",
		        Integer) { |v| @options[:port] = v }
		opts.on('-L', '--logfile LOGFILE',
				  "Specify the logfile to use",
		        "(default: #{@options[:logfile]})",
		        String) { |v| @options[:logfile] = v }
		opts.on('-P', '--pidfile PIDFILE',
		        "File to write the agent's process ID to",
			     "(default: #{@options[:pidfile]})",
		        String) { |v| @options[:pidfile] = v }
		opts.on('-I', '--include dir,dir', '--plugindirs dir,dir',
		        "Specify the director(y,ies} to load plugins",
		        "from",
		        "(default: #{@options[:plugindirs].join(',')})",
		        Array) { |v| @options[:plugindirs] = v }
		opts.on('-u', '--user USERNAME',
		        "The user to run the agent as",
		        "(default: #{@options[:user]})",
		        String) { |v| @options[:user] = v }
		opts.on('-F', '--foreground',
		        "Leave the agent running in the foreground") { @options[:background] = false }
		opts.on('-d', '--debug',
		        "Debugging mode.  Stay in the foreground,",
		        "log to stderr instead of the specified",
		        "logfile, and print lots of debugging",
		        "information.") do
		        	@options[:background] = false
		        	@options[:debug] = true
		        	@options[:logfile] = $stderr
				  end

		opts
	end

	def boot(agent)
		if @options[:background]
			background

			trap("SIGINT") { agent.shutdown; @pidfile.unlock }
			trap("SIGTERM") { agent.shutdown; @pidfile.unlock }
			trap("SIGHUP", "IGNORE")
		else
			trap("SIGINT") { agent.shutdown }
		end
		
		agent.open_socket
		drop_privs(@options[:user]) if Process.euid == 0
		@options[:plugindirs].each { |dir| agent.add_plugin_dir(dir) if File.directory? dir }
		agent.start
	end

	def drop_privs(user)
		euid = nil
		File.open("/etc/passwd") do |fd|
			fd.each_line do |l|
				if l =~ /^#{user}:[^:]*:(\d+)/
					euid = $1.to_i
				end
			end
		end

		if euid.nil?
			@log.error("Failed to find UID for #{user}; exiting")
			exit 2
		end

		File.chown(euid, 0, @options[:pidfile]) if File.exists?(@options[:pidfile])
		
		Process::UID.change_privilege(euid)
	end
	
	def background
		pid = fork
		if pid.nil?
			$stdout.close
			$stderr.close
			$stdin.close
		else
			unless @pidfile.lock(:for_pid => pid)
				kill('QUIT', pid)
				puts "Another ruby-snmpd process is running; exiting"
				exit 1
			end
			exit 0
		end
	end
end

class Pidlock
	attr_reader :lockfile
	
	def initialize(lockfile)
		@lockfile = lockfile
	end
	
	def locked?
		clear_if_stale
		File.exists? @lockfile
	end
	
	def mine?
		Process.pid == lock_pid
	end

	def anonymous?
		return false unless File.exists?(@lockfile)
		File.read(@lockfile) == ""
	end
	
	def lock(opts = {})
		opts = { :anonymous => false,
		         :for_pid => Process.pid
		       }.merge(opts)

		if locked?
			mine?
		else
			if opts[:anonymous]
				FileUtils.touch(@lockfile)
			else
				File.open(@lockfile, "w") { |fd| fd.puts(opts[:for_pid]) }
			end
			true
		end
	end
	
	def unlock(opts = {})
		opts = {:anonymous => false}.merge(opts)

		if mine? or (opts[:anonymous] and anonymous?)
			File.unlink(@lockfile)
			true
		else
			false
		end
	end

	private
	def lock_pid
		if File.exists? @lockfile
			File.read(@lockfile).to_i
		else
			nil
		end
	end

	def clear_if_stale
		return if lock_pid.nil?
		
		begin
			Process.kill(0, lock_pid)
		rescue Errno::ESRCH
			File.unlink(@lockfile)
		end
	end
end

RubySnmpd.new.main(*ARGV)
